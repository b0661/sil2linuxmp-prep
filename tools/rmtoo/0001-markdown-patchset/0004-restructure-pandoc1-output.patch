From 01aa225aefab448cbedef2e5e30af4adc5c67b14 Mon Sep 17 00:00:00 2001
From: Bernhard Noelte <b0661n0e17e@gmail.com>
Date: Tue, 15 Apr 2014 23:37:14 +0200
Subject: [PATCH] Restructure pandoc1 output.

- Make section pre/ post available for future tex/html extensions
- Remove unneeded prints
- Provide strong text instead of headers for Notes, Rationale, ...
---
 rmtoo/lib/IncludeText.py |   2 -
 rmtoo/outputs/pandoc1.py | 578 +++++++++++++++++++++++++++++++----------------
 2 files changed, 381 insertions(+), 199 deletions(-)

diff --git a/rmtoo/lib/IncludeText.py b/rmtoo/lib/IncludeText.py
index 58afcb0..945a3c7 100644
--- a/rmtoo/lib/IncludeText.py
+++ b/rmtoo/lib/IncludeText.py
@@ -39,8 +39,6 @@ class IncludeText:
         self.__parser.add_argument('sources', type=str, nargs='*')
         self.__include_args = self.__parser.parse_args(shlex.split(include_command))
 
-        print(IncludeText.__filters_available)
-
         # Get the filter
         self.__filter_obj = IncludeText.__filters_available.get(self.__include_args.filter_name)
         if self.__filter_obj == None:
diff --git a/rmtoo/outputs/pandoc1.py b/rmtoo/outputs/pandoc1.py
index d6e5c38..a1352be 100644
--- a/rmtoo/outputs/pandoc1.py
+++ b/rmtoo/outputs/pandoc1.py
@@ -105,7 +105,7 @@ class PandocRun:
         return [f.strip() for f in in_], [f.strip() for f in out]
 
 
-# pandoc handling
+# Pandoc Markdown Handling
 class PandocMarkdown:
     header_level_markup = [
         "#",
@@ -126,65 +126,263 @@ class PandocMarkdown:
 
     __re_header_markup_start = re.compile(r'^#', re.MULTILINE)
     
-    @staticmethod
-    def write_header(fd, level, title, identifier):
+
+    def __init__(self):
+        '''Create a pandoc1 markdown executor.
+        '''
+        tracer.debug("Called")
+        # File descriptor of output file
+        self.__fd = None
+        # section indention level
+        self.__section_level = 0
+        # Stack of section types
+        self.__section_stack = []
+
+    def open(self, filename):
+        ''' Prepare to output to file. '''
+        self.__fd = open(filename, "w")
+        # Reset all indexes
+        self.__section_level = 0
+        self.__section_class_stack = []
+        return self.__fd
+
+    def close(self):
+        ''' Close output to file. '''
+        self.__fd.close()
+
+    def section_pre(self, section_class, title, identifier):
+        ''' Generate start of section. 
+        section_class - Any of MasterTopic, SubTopic, IncludeSubTopic, Requirement, Constraint, Testcase, 
+                               Definition, Rationale, Note, Depends_on, Solved_by, Constrained_by, 
+                               Details, Expected_Result
+        title - Title of the section
+        '''
+        # Call section class specific method
+        method_name = "_%s_pre" % section_class
+        getattr(self, method_name)(title, identifier)
+        # Remember new section class on stack
+        self.__section_class_stack.append(section_class)
+
+    def section_post(self, section_class):
+        ''' Generate end of section. '''
+        ## Remove section class from stack
+        cls = self.__section_class_stack.pop()
+        assert cls == section_class
+        # Call section class specific method
+        method_name = "_%s_post" % section_class
+        getattr(self, method_name)()
+
+    def section_class(self):
+        '''class of current section.'''
+        return self.__section_class_stack[-1]
+
+    def _MasterTopic_pre(self, title, identifier):
+        ''' Start a master topic.'''
+        # No markdown.
+        return
+
+    def _MasterTopic_post(self):
+        ''' End a master topic. '''
+        # No markdown.
+        return
+
+    def _SubTopic_pre(self, title, identifier):
+        ''' Start a sub topic.'''
+        # No markdown.
+        return
+
+    def _SubTopic_post(self):
+        ''' End a sub topic. '''
+        # No markdown.
+        return
+    
+
+    def _IncludeSubTopic_pre(self, title, identifier):
+        ''' Start a sub topic.'''
+        # No markdown.
+        return
+
+    def _IncludeSubTopic_post(self):
+        ''' End a sub topic. '''
+        # No markdown.
+        return
+
+    def _Topic_pre(self, title, identifier):
+        ''' Start a topic.'''
+        # Do not output header
+        # - for master topic, as the master topic is the document
+        # - for IncludeTopic:, as this is explicitly requested by this directive.
+        if self.__section_class_stack[-1] == "SubTopic":
+            # Only write headers in subtopic environment
+            self.header(title, identifier)
+            self.__section_level += 1
+
+    def _Topic_post(self):
+        ''' End a topic. '''
+        if self.__section_class_stack[-1] == "SubTopic":
+            self.__section_level -= 1
+
+    def _Requirement_pre(self, title, identifier):
+        ''' Start a requirement.'''
+        self.header(title, identifier)
+        self.__section_level += 1
+
+    def _Requirement_post(self):
+        ''' End a requirement. '''
+        self.__section_level -= 1
+
+    def _Constraint_pre(self, title, identifier):
+        ''' Start a constraint.'''
+        self.header(title, identifier)
+        self.__section_level += 1
+
+    def _Constraint_post(self):
+        ''' End a constraint. '''
+        self.__section_level -= 1
+
+    def _Testcase_pre(self, title, identifier):
+        ''' Start a testcase.'''
+        self.header(title, identifier)
+        self.__section_level += 1
+
+    def _Testcase_post(self):
+        ''' End a testcase. '''
+        self.__section_level -= 1
+
+    def _Description_pre(self, title, identifier):
+        ''' Start a description.
+        Maybe for a requirement, constraint, testcase
+        '''
+        # Descriptions do not get a header
+        return
+
+    def _Description_post(self):
+        ''' End a description. '''
+        return
+
+    def _Rationale_pre(self, title, identifier):
+        ''' Start a rationale.
+        Maybe for a requirement, constraint, testcase
+        '''
+        self.markdown("\n**Rationale:**\n\n")
+
+    def _Rationale_post(self):
+        ''' End a rationale. '''
+        return
+
+    def _Note_pre(self, title, identifier):
+        ''' Start a note.
+        Maybe for a requirement, constraint, testcase
+        '''
+        self.markdown("\n**Note:**\n\n")
+        
+    def _Note_post(self):
+        ''' End a note. '''
+        return
+
+    def _Depends_on_pre(self, title, identifier):
+        ''' Start a Depends on section.
+        Maybe for a requirement, constraint, testcase
+        '''
+        self.markdown("\n**Depends on:**\n\n")
+
+    def _Depends_on_post(self):
+        ''' End a Depends on section. '''
+        return
+
+    def _Solved_by_pre(self, title, identifier):
+        ''' Start a Solved by section.
+        Maybe for a requirement, constraint, testcase
+        '''
+        self.markdown("\n**Solved by:**\n\n")
+
+    def _Solved_by_post(self):
+        ''' End a Solved by section. '''
+        return
+
+    def _Constrained_by_pre(self, title, identifier):
+        ''' Start a Constrained by section.
+        Maybe for a requirement, constraint, testcase
+        '''
+        self.markdown("\n**Constrained by:**\n\n")
+
+    def _Constrained_by_post(self):
+        ''' End a Constrained by section. '''
+        return
+
+    def _Tested_by_pre(self, title, identifier):
+        ''' Start a Tested by section.
+        Maybe for a requirement, constraint, testcase
+        '''
+        self.markdown("\n**Constrained by:**\n\n")
+
+    def _Tested_by_post(self):
+        ''' End a Tested by section. '''
+        return
+
+    def _Details_pre(self, title, identifier):
+        ''' Start a details section.
+        for a requirement, constraint, testcase
+        '''
+        # No header for details
+        return
+
+    def _Details_post(self):
+        ''' End a details section. '''
+        return
+
+    def _Expected_Result_pre(self, title, identifier):
+        ''' Start a Expected result section.
+        For a testcase
+        '''
+        self.markdown("\n**Expected result:**\n\n")
+
+    def _Expected_Result_post(self):
+        ''' End a Solved by section. '''
+        return
+    
+    def header(self, title, identifier):
         '''Output a header.'''
         # Note: Pandoc requires a blank line before a header
-        fd.write("\n%s %s {#%s}\n\n" % (PandocMarkdown.header_level_markup[level], title, identifier))
+        if len(identifier) > 0:
+            self.__fd.write("\n%s %s {#%s}\n\n" % (PandocMarkdown.header_level_markup[self.__section_level], title, identifier))
+        else:
+            self.__fd.write("\n%s %s\n\n" % (PandocMarkdown.header_level_markup[self.__section_level], title))
+
+    def markdown(self, text):
+        '''Output markdown text.'''
+        self.__fd.write("%s" % (text))
         
-    @staticmethod
-    def write_plain_text(fd, text):
+    def plain_text(self, text):
         '''Output plain text.'''
         # TODO convert plain text to markdown
-        fd.write("%s" % (text))
-        
-    @staticmethod
-    def write_markdown(fd, text):
-        '''Output markdown text.'''
-        fd.write("%s" % (text))
-
-    @staticmethod
-    def write_internal_link(fd, name, identifier):
-        '''Output an internal link.'''
-        fd.write("[%s](#%s)" % (name, identifier))
-
-    @staticmethod
-    def write_title_block(fd, title, author, date, cover_image):
-        '''Output a title block. '''
-        # YAML metadata block. (Version 1.12 needed)
-        fd.write("% {0}\n% {1}\n% {2}\n\n".format(title, author, date.isoformat()))
-        #fd.write("---\n")
-        #fd.write("title:\n- type: main\n  text: {0}\n".format(title))
-        #fd.write("creator:\n- role: author\n  text: {0}\n".format(author))
-        #fd.write("date: {0}\n".format(date.isoformat()))
-        #if cover_image != None and len(cover_image) > 0:
-        #    fd.write("cover-image: {0}\n".format(cover_image))
-        #fd.write("---\n")
-        
-    @staticmethod
-    def write_comment(fd, comment):
-        '''Output a comment. The comment will not produce any output by pandoc. '''
-        fd.write("<!-- %s -->\n\n" % (comment))
+        self.__fd.write("%s" % (text))
 
-    @staticmethod
-    def write_fragment(fd, level, fragment):
+    def fragment(self, fragment):
         '''Output a markdown fragment with header levels adjusted by level.'''
-        if level <= 0:
-            fd.write("%s\n\n" % (fragment))
+        if self.__section_level <= 0:
+            self.__fd.write("%s\n\n" % (fragment))
         else:
             # Adjust header levels
-            fragment = PandocMarkdown.__re_header_markup_start.sub(PandocMarkdown.header_level_markup[level], fragment)
-            fd.write("%s\n\n" % (fragment))
+            fragment = PandocMarkdown.__re_header_markup_start.sub(PandocMarkdown.header_level_markup[self.__section_level], fragment)
+            self.__fd.write("%s\n\n" % (fragment))
 
-    @staticmethod
-    def write_link_list(fd, link_list, format=None):
+    def internal_link(self, name, identifier):
+        '''Output an internal link.'''
+        self.__fd.write("[%s](#%s)" % (name, identifier))
+        
+    def comment(self, comment):
+        '''Output a comment. The comment will not produce any output by pandoc. '''
+        self.__fd.write("<!-- %s -->\n\n" % (comment))
+
+    def link_list(self, link_list, format=None):
         '''Output a link list formatted acc. to format
         from a list of link specification tuples (link text, link uri | internal reference, link title).
         internal reference must be of the form #re-fe-re-nc-e
         uri may be any URI
         The link text is what shows up in a document.
         '''
-        fd.write("\n") # Make an empty line. Most list formats need that.
+        self.__fd.write("\n") # Make an empty line. Most list formats need that.
         line = ""
         link_spec = ()
         for link_spec in link_list:
@@ -194,23 +392,33 @@ class PandocMarkdown:
             link += ")"
             if format == "BulletList":
                 # Bullet list
-                fd.write("%s%s\n" % (PandocMarkdown.bullet_list_markup, link))
+                self.__fd.write("%s%s\n" % (PandocMarkdown.bullet_list_markup, link))
             else:
                 # Comma separated list
                 if len(line) > 0:
                     if len(line) + len(link) > 80 - 2:
-                        fd.write(line + ",\n")
+                        self.__fd.write(line + ",\n")
                         line = ""
                     else:
                         line += ", "
                 line += link
         if len(line) > 0:
-            fd.write(line)
-        fd.write("\n\n")
-            
+            self.__fd.write(line)
+        self.__fd.write("\n\n")
 
-    @staticmethod
-    def write_simple_table(fd, simple_table, with_header=True):
+    def title_block(self, title, author, date, cover_image):
+        '''Output a title block. '''
+        # YAML metadata block. (Version 1.12 needed)
+        self.__fd.write("% {0}\n% {1}\n% {2}\n\n".format(title, author, date.isoformat()))
+        #self.__fd.write("---\n")
+        #self.__fd.write("title:\n- type: main\n  text: {0}\n".format(title))
+        #self.__fd.write("creator:\n- role: author\n  text: {0}\n".format(author))
+        #self.__fd.write("date: {0}\n".format(date.isoformat()))
+        #if cover_image != None and len(cover_image) > 0:
+        #    self.__fd.write("cover-image: {0}\n".format(cover_image))
+        #self.__fd.write("---\n")
+        
+    def simple_table(self, simple_table, with_header=True):
         '''Output a markdown table from a simple table.
         Simple tables are just a list of rows, that are a list of cells.
         The first line is used as header if with_header is set to True.
@@ -236,7 +444,7 @@ class PandocMarkdown:
             table2.insert(0, header_separator)
         table3 = '\n'.join(table2)
         # Write to file
-        fd.write("%s\n" % (table3))
+        self.__fd.write("%s\n" % (table3))
 
 
 class PandocUID:
@@ -370,9 +578,14 @@ class PandocUID:
         return PandocUID.requirement(req) + "-solved-by"
 
     @staticmethod
-    def requirement_constraints(req):
+    def requirement_constrained_by(req):
         '''Generate unique requirement identifier from requirement.'''
-        return PandocUID.requirement(req) + "-constraints"
+        return PandocUID.requirement(req) + "-constrained-by"
+    
+    @staticmethod
+    def requirement_tested_by(req):
+        '''Generate unique requirement identifier from requirement.'''
+        return PandocUID.requirement(req) + "-tested-by"
 
 
 class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
@@ -388,6 +601,7 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
         self.__ce3set = None
         self.__fd = None
         self.__constraints_reqs_ref = {}
+        self.__markdown = PandocMarkdown()
         # Stack of sub topic call envionment.
         # - sub topic called by SubTopic:
         # - sub topic called by IncludeSubTopic:
@@ -419,9 +633,11 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
 
     def topic_set_pre(self, _topics_set):
         '''Prepare the output file.'''
-        self.__fd = open(self._output_filename, "w")
+        self.__markdown.open(self._output_filename)
         # Remember the master topic
         self.__master_topic = _topics_set.get_master_topic()
+        self.__markdown.section_pre("MasterTopic", self.__master_topic.get_topic_name(), 
+                                    PandocUID.topic(self.__master_topic))
 
     def __output_topic_set_constraints(self, topic_set):
         '''Write out all constraints for the topic set.'''
@@ -429,42 +645,39 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
         if len(constraints) == 0:
             tracer.debug("No constraints to output.")
             return
-        PandocMarkdown.write_header(self.__fd, self.__level, "Constraints", PandocUID.topic_set_constraints(topic_set))
-        self.__level += 1
+        self.__markdown.section_pre("Topic", "Constraints", PandocUID.topic_set_constraints(topic_set))
         for cname, cnstrt in sorted(constraints.iteritems()):
             # Write out one constraint
             tracer.debug("Output constraint [%s]." % cname)
-            PandocMarkdown.write_comment(self.__fd, "CTR '%s'" % cname)
-            
-            PandocMarkdown.write_header(self.__fd, self.__level, cnstrt.get_value("Name").get_content(), PandocUID.constraint(cnstrt))
-            self.__level += 1
-            PandocMarkdown.write_header(self.__fd, self.__level, "Description", PandocUID.constraint_description(cnstrt))
-            PandocMarkdown.write_fragment(self.__fd, self.__level,
-                                          cnstrt.get_value("Description").get_content())
-            self.__level -= 1
+            self.__markdown.comment("CTR '%s'" % cname)
+
+            self.__markdown.section_pre("Constraint", cnstrt.get_value("Name").get_content(), PandocUID.constraint(cnstrt))
+
+            self.__markdown.section_pre("Description", "Description", PandocUID.constraint_description(cnstrt))
+            self.__markdown.fragment(cnstrt.get_value("Description").get_content())
+            self.__markdown.section_post("Description")
+
             if cnstrt.is_val_av_and_not_null("Rationale"):
-                PandocMarkdown.write_header(self.__fd, self.__level, "Rationale", PandocUID.constraint_rationale(cnstrt))
-                self.__level += 1
-                PandocMarkdown.write_fragment(self.__fd, self.__level,
-                                              cnstrt.get_value("Rationale").get_content())
-                self.__level -= 1
+                self.__markdown.section_pre("Rationale", "Rationale", PandocUID.constraint_rationale(cnstrt))
+                self.__markdown.fragment(cnstrt.get_value("Rationale").get_content())
+                self.__markdown.section_post("Rationale")
+
             if cnstrt.is_val_av_and_not_null("Note"):
-                PandocMarkdown.write_header(self.__fd, self.__level, "Note", PandocUID.constraint_note(cnstrt))
-                self.__level += 1
-                PandocMarkdown.write_fragment(self.__fd, self.__level,
-                                            cnstrt.get_value("Note").get_content())
-                self.__level -= 1
+                self.__markdown.section_pre("Note", "Note", PandocUID.constraint_note(cnstrt))
+                self.__markdown.fragment(cnstrt.get_value("Note").get_content())
+                self.__markdown.section_post("Note")
+
             # Write out the references to the requirements
-            PandocMarkdown.write_header(self.__fd, self.__level, "Requirements", PandocUID.constraint_requirements(cnstrt))
-            # self.__level += 1 - following code does not use it
+            self.__markdown.section_pre("Solved_by", "Requirements", PandocUID.constraint_requirements(cnstrt))
             link_list = []
             for req in self.__constraints_reqs_ref[cname]:
                 link_list += (req.get_name(), "#" + PandocUID.requirement(req), None)
-            PandocMarkdown.write_link_list(self.__fd, link_list)
-            # self.__level -= 1
-            self.__level -= 1
+            self.__markdown.link_list(link_list)
+            self.__markdown.section_post("Solved_by")
+
+            self.__markdown.section_post("Constraint")
             tracer.debug("Output constraint [%s] finished." % cname)
-        self.__level -= 1
+        self.__markdown.section_post("Topic")
 
     def __output_topic_set_testcases(self, topic_set):
         '''Write out all testcases for the topic set.'''
@@ -472,51 +685,57 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
         if len(testcases) == 0:
             tracer.debug("No testcases to output.")
             return
-        PandocMarkdown.write_header(self.__fd, self.__level, "Test Cases", PandocUID.topic_set_testcases(topic_set))
-        self.__level += 1
+        self.__markdown.section_pre("Topic", "Test Cases", PandocUID.topic_set_testcases(topic_set))
+
         for cname, cnstrt in sorted(testcases.iteritems()):
             # Write out one test case
             tracer.debug("Output test case [%s]." % cname)
-            PandocMarkdown.write_comment(self.__fd, "TEST-CASE '%s'" % cname)
-            
-            PandocMarkdown.write_header(self.__fd, self.__level, cnstrt.get_value("Name").get_content(), PandocUID.testcase(cnstrt))
-            self.__level += 1
-            PandocMarkdown.write_header(self.__fd, self.__level, "Description", PandocUID.testcase_description(cnstrt))
-            self.__level += 1
-            PandocMarkdown.write_fragment(self.__fd, self.__level,
-                                          cnstrt.get_value("Description").get_content())
-            self.__level -= 1
+            self.__markdown.comment("TEST-CASE '%s'" % cname)
+
+            self.__markdown.section_pre("Testcase", cnstrt.get_value("Name").get_content(), PandocUID.testcase(cnstrt))
+
+            self.__markdown.section_pre("Description", "Description", "Description", PandocUID.testcase_description(cnstrt))
+            self.__markdown.fragment(cnstrt.get_value("Description").get_content())
+            self.__markdown.section_post("Description")
+
             if cnstrt.is_val_av_and_not_null("Expected Result"):
-                PandocMarkdown.write_header(self.__fd, self.__level, "Expected Result", PandocUID.textcase_expectedresult(cnstrt))
-                self.__level += 1
-                PandocMarkdown.write_fragment(self.__fd, self.__level,
-                                            cnstrt.get_value("Expected Result").get_content())
-                self.__level -= 1
+                self.__markdown.section_pre("Expected_Result", "Expected Result", PandocUID.textcase_expectedresult(cnstrt))
+                self.__markdown.fragment(cnstrt.get_value("Expected Result").get_content())
+                self.__markdown.section_post("Expected_Result")
+
             if cnstrt.is_val_av_and_not_null("Rationale"):
-                PandocMarkdown.write_header(self.__fd, self.__level, "Rationale", PandocUID.textcase_rationale(cnstrt))
-                self.__level += 1
-                PandocMarkdown.write_fragment(self.__fd, self.__level,
-                                            cnstrt.get_value("Rationale").get_content())
-                self.__level -= 1
+                self.__markdown.section_pre("Rationale", "Rationale", PandocUID.testcase_rationale(cnstrt))
+                self.__markdown.fragment(cnstrt.get_value("Rationale").get_content())
+                self.__markdown.section_post("Rationale")
+
             if cnstrt.is_val_av_and_not_null("Note"):
-                PandocMarkdown.write_header(self.__fd, self.__level, "Note", PandocUID.testcase_note(cnstrt))
-                self.__level += 1
-                PandocMarkdown.write_fragment(self.__fd, self.__level,
-                                            cnstrt.get_value("Note").get_content())
-                self.__level -= 1
-            self.__level -= 1
+                self.__markdown.section_pre("Note", "Note", PandocUID.testcase_note(cnstrt))
+                self.__markdown.fragment(cnstrt.get_value("Note").get_content())
+                self.__markdown.section_post("Note")
+
+            self.__markdown.section_post("Testcase")
             tracer.debug("Output test case [%s] finished." % cname)
-        self.__level -= 1
+        self.__markdown.section_post("Topic")
 
     def topic_set_post(self, topic_set):
         '''Print out the constraints and clean up file.'''
         tracer.debug("Called; output constraints.")
         if topic_set == None:
             assert False
+            
+        self.__markdown.section_pre("SubTopic", "Constraints", "")
         self.__output_topic_set_constraints(topic_set)
+        self.__markdown.section_post("SubTopic")
+        
+        self.__markdown.section_pre("SubTopic", "Test Cases", "")
         self.__output_topic_set_testcases(topic_set)
+        self.__markdown.section_post("SubTopic")
+        
+        self.__markdown.section_post("MasterTopic")
+        
         tracer.debug("Clean up file.")
-        self.__fd.close()
+        self.__markdown.close()
+
         tracer.debug("Generate dependent output.")
         if len(self.__output_filename_pdf) > 0:
             self.__fd = open(self._output_filename, "r")
@@ -528,7 +747,9 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
                                     "--output=%s" % (self.__output_filename_pdf), 
                                     "--template=%s" % (self.__output_template_tex),
                                     "--latex-engine=xelatex",
-                                    "-V", "mainfont='Adobe Ming Std'" 
+                                    "-V", "documentclass=report",
+                                    "-V", "mainfont=TeX Gyre Termes", 
+                                    "-V", "papersize=a4paper"
                                    ])
             self.__fd.close()
         if len(self.__output_filename_html) > 0:
@@ -541,51 +762,41 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
                                     "--output=%s" % (self.__output_filename_html) 
                                    ])
             self.__fd.close()
-        tracer.debug("Clean up file.")
-        self.__fd.close()
         tracer.debug("Finished.")
 
-    def topic_sub_pre(self, _subtopic):
+    def topic_sub_pre(self, subtopic):
         '''Called when before the subtopic is called.'''
-        self.__sub_topic_stack.append("SubTopic:")
+        self.__markdown.section_pre("SubTopic", "", "")
 
     def topic_sub_post(self, _subtopic):
         '''Called when after the subtopic is called.'''
-        key = self.__sub_topic_stack.pop()
+        self.__markdown.section_post("SubTopic")
 
     def topic_include_sub_pre(self, _subtopic):
         '''Called before the subtopic is called.
         Indicates sub topic shall be included'''
         '''Called when before the subtopic is called.'''
-        self.__sub_topic_stack.append("IncludeSubTopic:")
+        self.__markdown.section_pre("IncludeSubTopic", "", "")
 
     def topic_include_sub_post(self, _subtopic):
         '''Called after include subtopic is called.'''
-        key = self.__sub_topic_stack.pop()
+        self.__markdown.section_post("IncludeSubTopic")
 
     def topic_pre(self, topic):
         '''Output one topic.
            This method is called once for each topic and subtopic.'''
         tracer.debug("Called: topic name [%s] in [%s] environment." % (topic.get_name(), self.__sub_topic_stack[-1]))
-        if self.__sub_topic_stack[-1] == "SubTopic:":
-            # Only write headers in subtopic environment
-            PandocMarkdown.write_header(self.__fd, self.__level, topic.get_topic_name(), PandocUID.topic(topic))
-            self.__level += 1
-        else:
-            # Do not output header
-            # - for master topic, as the master topic is the document
-            # - for IncludeTopic:, as this is explicitly requested by this directive.
-            if self.__sub_topic_stack[-1] == "MasterTopic":
-                assert topic == self.__master_topic
-                # Write title block for master topic
-                PandocMarkdown.write_title_block(self.__fd, topic.get_topic_name(), "", date.today(),
-                                                 self.__output_cover_image)
-        PandocMarkdown.write_comment(self.__fd, "Output topic '%s'" % topic.get_id())
+        if topic == self.__master_topic:
+            # Write title block for master topic
+            self.__markdown.title_block(topic.get_topic_name(), "", date.today(),
+                                        self.__output_cover_image)
+        
+        self.__markdown.section_pre("Topic", topic.get_topic_name(), PandocUID.topic(topic))
+        self.__markdown.comment("Output topic '%s'" % topic.get_id())
 
     def topic_post(self, topic):
         '''Cleanup things for topic.'''
-        if self.__sub_topic_stack[-1] == "SubTopic:":
-            self.__level -= 1
+        self.__markdown.section_post("Topic")
 
     def topic_name(self, _name):
         '''Output the topic name.'''
@@ -596,11 +807,11 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
         # process the include command
         include_text = IncludeText(self._config, include_command)
         text = include_text.get_text_as_markdown()
-        PandocMarkdown.write_fragment(self.__fd, self.__level, text)
+        self.__markdown.fragment(text)
 
     def topic_text(self, text):
         '''Write out the given text.'''
-        PandocMarkdown.write_fragment(self.__fd, self.__level, text)
+        self.__markdown.fragment(text)
 
     def requirement_set_pre(self, rset):
         '''Prepare the requirements set output.'''
@@ -621,22 +832,15 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
         # req is a RequirementDNode -> the requirement is in req.get_requirement()
         
         req_uid = PandocUID.requirement(req.get_requirement())
-        PandocMarkdown.write_comment(self.__fd, "REQ '%s' uid: '%s'" % (req.get_name(), req_uid))
-
-        # Requirement header
-        PandocMarkdown.write_header(self.__fd, self.__level, 
-                                    req.get_requirement().get_value("Name").get_content(),
-                                    req_uid)
-        self.__level += 1
-        # Requirement Description Header - Omitted as it is redundant to requirements header.
-        # PandocMarkdown.write_header(self.__fd, self.__level,
-        #                           "Description",
-        #                            PandocUID.requirement_description(req.get_requirement()))
-
-        # Requirement Description Content
-        PandocMarkdown.write_fragment(self.__fd, self.__level + 1,
-                                      req.get_requirement().get_value("Description").get_content())
+        self.__markdown.comment("REQ '%s' uid: '%s'" % (req.get_name(), req_uid))
+
+        self.__markdown.section_pre("Requirement", req.get_requirement().get_value("Name").get_content(), req_uid)
 
+        self.__markdown.section_pre("Description", "Description", PandocUID.requirement_description(req.get_requirement()))
+        self.__markdown.fragment(req.get_requirement().get_value("Description").get_content())
+        self.__markdown.section_post("Description")
+
+        self.__markdown.section_pre("Details", "Details:", "")
         # Write table of standard attributes
         # Put mostly 4 things in a row
         status = req.get_requirement().get_value("Status").get_output_string()
@@ -679,67 +883,49 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
                 raise RMTException(85, "Wrong pandoc1 output configuration "
                                    "supplied: unknown tag [%s]" % rattr)
         simple_table += [row1, row2]
-        PandocMarkdown.write_simple_table(self.__fd, simple_table, False)
+        self.__markdown.simple_table(simple_table, False)
+        self.__markdown.section_post("Details")
 
         if req.get_requirement().is_val_av_and_not_null("Rationale"):
-            # Requirement Rationale Header
-            PandocMarkdown.write_header(self.__fd, self.__level,
-                                        "Rationale",
-                                        PandocUID.requirement_rationale(req.get_requirement()))
-            # Requirement Rationale Content
-            PandocMarkdown.write_fragment(self.__fd, self.__level + 1,
-                                          req.get_requirement().get_value("Rationale").get_content())
-        
+            self.__markdown.section_pre("Rationale", "Rationale", PandocUID.requirement_rationale(req.get_requirement()))
+            self.__markdown.fragment(req.get_requirement().get_value("Rationale").get_content())
+            self.__markdown.section_post("Rationale")
+  
         if req.get_requirement().is_val_av_and_not_null("Note"):
-            # Requirement Note Header
-            PandocMarkdown.write_header(self.__fd, self.__level,
-                                        "Note",
-                                        PandocUID.requirement_note(req.get_requirement()))
-            # Requirement Note Content
-            PandocMarkdown.write_fragment(self.__fd, self.__level + 1,
-                                          req.get_requirement().get_value("Note").get_content())
+            self.__markdown.section_pre("Note", "Note", PandocUID.requirement_note(req.get_requirement()))
+            self.__markdown.fragment(req.get_requirement().get_value("Note").get_content())
+            self.__markdown.section_post("Note")
 
         if req.get_outgoing_cnt() > 0:
             # Only output the depends on when there are fields for output.
-            # Requirement Depends on Header
-            PandocMarkdown.write_header(self.__fd, self.__level,
-                                        "Depends on",
-                                        PandocUID.requirement_depends_on(req.get_requirement()))
-            # self.__level += 1 - following code does not use it
+            self.__markdown.section_pre("Depends_on", "Depends on", PandocUID.requirement_depends_on(req.get_requirement()))
             # Create links to the corresponding labels.
             link_list = []
             for d in sorted(req.get_iter_outgoing(), key=lambda r: r.get_name()):
                 link_list += [(d.get_requirement().get_id(), "#" + PandocUID.requirement(d.get_requirement()), "")]
-            PandocMarkdown.write_link_list(self.__fd, link_list)
-            # self.__level -= 1
+            self.__markdown.link_list(link_list)
+            self.__markdown.section_post("Depends_on")
 
         if req.get_incoming_cnt() > 0:
-            # Only output the depends on when there are fields for output.
-            # Requirement Solved by Header
-            PandocMarkdown.write_header(self.__fd, self.__level,
-                                        "Solved by",
-                                        PandocUID.requirement_solved_by(req.get_requirement()))
-            # self.__level += 1 - following code does not use it
+            # Only output the solved by when there are fields for output.
+            self.__markdown.section_pre("Solved_by", "Solved by", PandocUID.requirement_solved_by(req.get_requirement()))
             # Create links to the corresponding dependency nodes.
             link_list = []
             for d in sorted(req.get_iter_incoming(), key=lambda r: r.get_name()):
                 link_list += [(d.get_name(), "#" + PandocUID.requirement(d.get_requirement()), "")]
-            PandocMarkdown.write_link_list(self.__fd, link_list)
-            # self.__level -= 1
+            self.__markdown.link_list(link_list)
+            self.__markdown.section_post("Solved_by")
 
-        tracer.debug("Output constraints")
+        tracer.debug("Output constrained by")
         if self.__ce3set != None:
             req_ce3set = self.__ce3set.get(req.get_name())
             tracer.debug("Constraints are available [%s]" % req_ce3set)
             tracer.debug("Check constraint header output [%s]" %
                          req_ce3set.len())
             if req_ce3set != None and req_ce3set.len() > 0:
-                tracer.debug("Output constraint header")
-                # Constraints header
-                PandocMarkdown.write_header(self.__fd, self.__level,
-                                            "Constraints",
-                                            PandocUID.requirement_constraints(req.get_requirement()))
-                # self.__level += 1 - following code does not use it
+                tracer.debug("Output constrained by header")
+                self.__markdown.section_pre("Contrained_by", "Constrained by",
+                                            PandocUID.requirement_constrained_by(req.get_requirement()))
                 link_list = []
                 for key, val in sorted(req_ce3set.get_values().iteritems()):
                     refid = PandocUID.constraint(key)
@@ -749,23 +935,21 @@ class pandoc1(StdOutputParams, ExecutorTopicContinuum, CreateMakeDependencies):
                     # constraints to requirements ref.
                     # @TODO check for refid or cname to use, should be cname I think -> key
                     self.__add_constraint_req_ref(key, req)
-                PandocMarkdown.write_link_list(self.__fd, link_list)
-                # self.__level -= 1
+                self.__markdown.link_list(link_list)
+                self.__markdown.section_post("Contrained_by")
 
         testcases = req.get_requirement().get_value_default("Test Cases")
         if testcases != None:
-            # Constraints header
-            PandocMarkdown.write_header(self.__fd, self.__level,
-                                        "Test Cases", PandocUID.testcases(testcases))
+            self.__markdown.section_pre("Tested_by", "Tested by", PandocUID.testcases(testcases))
             # self.__level += 1 - following code does not use it
             link_list = []
             for testcase in testcases:
                 link_list += [(testcase.get_value("Name"), "#" + PandocUID.testcase(testcase), None)]
-            PandocMarkdown.write_link_list(self.__fd, link_list)
-            # self.__level -= 1
+            self.__markdown.link_list(link_list)
+            self.__markdown.section_post("Tested_by")
 
         # End of requirement
-        self.__level -= 1
+        self.__markdown.section_post("Requirement")
 
     def cmad_topic_continuum_pre(self, _):
         '''Write out the one and only dependency to all the requirements.'''
-- 
1.8.3.2

